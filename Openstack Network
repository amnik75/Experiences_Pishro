https://superuser.openstack.org/articles/spot-the-difference-tenant-provider-and-external-neutron-networks/#:~:text=Therefor%2C%20provider%20networks%20are%20often,aptly%20named%20'external').

Compute hosts should always have the appropriate NICs configured for promiscuous mode.
OpenStack is able to take advantage of VLANs to isolate the traffic of different projects, even if the projects happen to have instances running on the same 
compute host.
Note that if you are using VLANs on your physical switches to implement project isolation in your OpenStack cloud, you must ensure that all of your 
switchports are configured as trunk ports.
https://docs.openstack.org/neutron/ussuri/admin/intro-basic-networking.html

services port openstack https://docs.openstack.org/install-guide/firewalls-default-ports.html

UDP has support for one-to-many communication: sending a single packet to multiple hosts. An application can broadcast a UDP packet to all of the 
etwork hosts on a local network by setting the receiver IP address as the special IP broadcast address 255.255.255.255
An application can also send a UDP packet to a set of receivers using IP multicast.
https://docs.openstack.org/neutron/ussuri/admin/intro-basic-networking.html

TCP is a protocol for communication between exactly two endpoints so we can not use it for broadcast and multicast.
https://stackoverflow.com/questions/21266008/can-i-use-broadcast-or-multicast-for-tcp

Each network namespace also has its own routing table, and in fact this is the main reason for namespaces to exist
A routing table is keyed by destination IP address, so network namespaces are what you need if you want the same destination IP address to mean 
different things at different times- which is something that OpenStack Networking requires for its feature of providing overlapping IP addresses in 
different virtual networks.
Each network namespace also has its own set of iptables (for both IPv4 and IPv6). So, you can apply different security to flows with the same IP addressing 
in different namespaces, as well as different routing.
https://docs.openstack.org/neutron/ussuri/admin/intro-network-namespaces.html

in the form that OpenStack deployments use, a NAT router on the path between the sender and receiver replaces the packet’s source IP address with the 
router’s public IP address. The router also modifies the source TCP or UDP port to another value, and the router maintains a record of the sender’s 
true IP address and port, as well as the modified IP address and port.
OpenStack uses SNAT to enable applications running inside of instances to connect out to the public Internet.
OpenStack uses DNAT to route packets from instances to the OpenStack metadata service.
OpenStack uses one-to-one NAT to implement floating IP addresses.
https://docs.openstack.org/neutron/ussuri/admin/intro-nat.html

In general, the OpenStack Networking software components that handle layer-3 operations impact performance and reliability the most. To improve performance 
and reliability, provider networks move layer-3 operations to the physical network infrastructure.
The Networking service uses a layer-3 agent to manage routers via namespaces.
The Networking service implements the DHCP service using an agent that manages qdhcp namespaces and the dnsmasq service.
If you launch an instance without specifying a security group, the default security group automatically applies to it. Similarly, if you create a port 
without specifying a security group, the default security group automatically applies to it.
Security group rules are stateful. Thus, allowing ingress TCP port 22 for secure shell automatically creates rules that allow return egress traffic and 
ICMP error messages involving those TCP connections.
https://docs.openstack.org/neutron/ussuri/admin/intro-os-networking.html ***Read it in future again***

can we have floating ip without having router for network project?
doesn't gre and vxlan need switch cinfiguration in datacenter?
provider network is flat and project network is gre?
where the security group handle?
how does vm in network comunicate?
route for local network go to qrouter?
why one project network get multiple subnets?
network topology with firewalls?

You can find out what TAP is being used by looking at the /etc/libvirt/qemu/instance-xxxxxxxx.xml file.
The TAP device name is constructed using the first 11 characters of the port ID (10 hex digits plus an included ‘-‘)
he TAP devices and veth devices are normal Linux network devices and may be inspected with the usual tools, such as ip and tcpdump. Open vSwitch internal 
devices, such as patch-tun, are only visible within the Open vSwitch environment. If you try to run tcpdump -i patch-tun, it will raise an error, saying that 
the device does not exist

On the integration bridge, networks are distinguished using internal VLANs regardless of how the networking service defines them. This allows instances on the 
same host to communicate directly without transiting the rest of the virtual, or physical, network. These internal VLAN IDs are based on the order they are 
created on the node and may vary between nodes. These IDs are in no way related to the segmentation IDs used in the network definition and on the physical wire.
All interfaces on the br-tun are internal to Open vSwitch. To monitor traffic on them, you need to set up a mirror port 
All translation of GRE tunnels to and from internal VLANs happens on br-tun.
Note that any traffic to the l3-agent or dhcp-agent will be visible only within their network namespace.
Use ping to quickly find where a failure exists in the network path. In an instance, first see whether you can ping an external host, such as google.com. 
If you can, then there shouldn’t be a network problem at all.

One common networking problem is that an instance boots successfully but is not reachable because it failed to obtain an IP address from dnsmasq, which is the 
DHCP server that is launched by the nova-network service.
The simplest way to identify that this is the problem with your instance is to look at the console output of your instance. If DHCP failed, you can retrieve the 
console log by doing:
openstack console log show <instance name or uuid>
A DHCP problem might be caused by a misbehaving dnsmasq process. First, debug by checking logs and then restart the dnsmasq processes only for that 
project (tenant)
ps aux | grep dnsmasq # check that dhcp is running
If your instances are still not able to obtain IP addresses, the next thing to check is whether dnsmasq is seeing the DHCP requests from the instance. 
On the machine that is running the dnsmasq process, which is the compute host if running in multi-host mode, look at /var/log/syslog to see the dnsmasq output.
In an OpenStack cloud, the dnsmasq process acts as the DNS server for the instances in addition to acting as the DHCP server. A misbehaving dnsmasq process may 
be the source of DNS-related issues inside the instance

your network nodes will run their dhcp-agents and l3-agents in isolated namespaces. Network interfaces and traffic on those interfaces will not be visible in 
the default namespace
qrouter-<id router>
qdhcp-<id network>

# you can see these ports in netns router
qr-<id> id is related to the port id in internal subnet connect ot br-int
qg-<id> id is related to the port id in external subnet connect to br-ex

# you can see this port in netns dhcp
tap<id> id is related to the port id for dhcp that connec to br-int





