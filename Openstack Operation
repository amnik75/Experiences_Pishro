Cloud-based applications typically request more discrete hardware (horizontal scaling) as opposed to traditional applications, which require larger hardware to 
scale (vertical scaling).
OpenStack is designed to be horizontally scalable. Rather than switching to larger servers, you procure more servers and simply install identically configured 
services.
Hardware does not have to be consistent, but it should at least have the same type of CPU to support instance migration.
Examples of burn-in tests include running a CPU or disk benchmark for several days.

For capacity planning this link is very good. https://docs.openstack.org/operations-guide/ops-capacity-planning-scaling.html

openstack --debug server list # use --debug to show api calls
openstack compute service list --long # how to get an overview of your cloud, its shape, size, and current state.
openstack catalog list
nova diagnostics <serverID>

The admin is global, not per project, so granting a user the admin role in any project gives the user administrative rights across the whole cloud.

ps aux | grep nova-
ps aux | grep glance-
ps aux | grep keystone
ps aux | grep cinder

# If the commands work as expected, you can be confident that those services are in working condition
. openrc
openstack image list
openstack server list
openstack project list

ip route get <ip> # for more information :)

# for Cloud Controller failure this link is good
https://docs.openstack.org/operations-guide/ops-maintenance-controller.html

# for Compute Node Failures and Maintenance this link is good
https://docs.openstack.org/operations-guide/ops-maintenance-compute.html

# istances xml files are in /etc/libvirt/qemu/instance-xxxxxxxx.xml
openstack server reboot --hard <server> # it regerate the xml file and  then reboot it

# data of the instances are in /var/lib/nova/instances

# to mount the disk of openstack instance we should do this.
modprob nbd
sudo qemu-nbd -c /dev/nbd0 rbd:nova/dcd23225-cf06-466f-91da-f866a9cd8791_disk -f raw
mount /dev/nbd0p1 /mnt
umount /mnt
sudo qemu-nbd -d /dev/nbd0






